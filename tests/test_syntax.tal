! Compilter directives
! meta.preprocessor
! meta.preprocessor.multiline-directive.tal
! keyword.preprocessor.tal
?cpu TNS/II
?assertion
?begincompilation
?decs
?definetog, settog, resettog
?dumpcons
?endif
?if
?ifnot
?page
?extendstack
?compact, nocompact
?rp
?section
?source
?source =foo(proc1)
?source =foo(proc2,
  invalid
? procs3
?)
?list, nolist, pushlist, poplist
?code, nocode
?inspect, highrequesters, highpin, runnamed, errors, syntax, errorfile
?symbols, nosymbols
?lmap, nolmap
?gmap, nogmap
?fmap, nofmap
?map , nomap, pushmap, popmap
?crossref, nocrossref
?innerlist, noinnerlist
?search
?fixup, nofixup
?datapages
?int32index, noint32index, pushint32index, popint32index
?warn, nowarn
?saveabend, nosaveabend
?inhibitxx, noinhibitxx
?check, nocheck, pushcheck, popcheck
?suppress, nosuppress
? noinnerlist, pushinnerlist, popinnerlist

! Storage Types
! storage.type.tal
unsigned(10) foo;
unsigned (10) foo;
unsigned(10 ) foo;
unsigned    (15) foo;
int foo;
int(16) foo;
int (16) foo;
int(32) foo;
int    (32 ) foo;
int(64) foo;
int        (64 ) foo;
int (_literals^are^ok) foo;
fixed foo;
fixed(3) foo;
fixed(-3 ) foo;
fixed    (-3) foo;
fixed(*) foo;
real foo;
real(32) foo;
real(64) foo;
real (64) foo;
literal foo_l;
define foo_d(x) = bar((x) + 1)#;
string char;
string .ext char;
string .char;
string ._char;
string .^char;
struct .foo(bar);
struct foo(bar);
struct .foo(bar);
struct .ext foo(bar);

int(15) foo; ! invalid
int(0_not_ok) ! invalid
real(16) foo; ! invalid
real(0_not_ok) ! invalid
fixed(166) foo; ! invalid
fixed(*2) foo; ! invalid
fixed(literal_are_not_ok_with_fixed) foo; ! invalid
fixed(0_not_ok) foo; ! invalid
unsigned foo; ! invalid
unsigned(123) foo; ! invalid
unsigned(0_not_ok) ! invalid
unsigned(1-2) foo; ! invalid

! Function
! entity.name.function.tal
call foo;
call foo();
foo();
call foo(p1, 2);
call foo(foo(p1, foo(2)));
foo(bar(for)for)
foo($len(for)for)
foo($switches(for)for)
foo($switches bar(for)for)

! subproc/proc followed by ^ is incorrectly considered a procedure.
if proc^foo = 0 then
if subproc^foo = 0 then

! Numbers
! constant.numeric.tal

! int constants
0123456789 ! decimal
%01234567 ! octal
%01234569 ! octal, invalid
%b01 ! binary
%b23 ! binary, invalid
%h0123456789abcdef ! hex
%h0123456789abcdel ! hex, invalid

! int(32) constants
0123456789d ! decimal
%01234567d ! octal
%01234569d ! octal, invalid
%b01d ! binary
%b23d ! binary, invalid
%h0123456789abcdef%d ! hex
%h0123456789abcdel%d ! hex, invalid

! fixed constants
0123456789f ! decimal
01234.6789f ! decimal, fraction
%01234567f ! octal
%01234569f ! octal, invalid
%b01f ! binary
%b23f ! binary, invalid
%h0123456789abcdef%f ! hex
%h0123456789abcdel%f ! hex, invalid

! real constants
01234.6789e0  ! decimal
01234.6789l0  ! decimal
01234.6789e   ! decimal, invalid
01234.6789l   ! decimal, invalid
01234.6789e-1 ! decimal
01234.6789l-1 ! decimal
01234.6789e+1 ! decimal
01234.6789l+1 ! decimal
